from qiskit import QuantumCircuit, QuantumRegister, ClassicalRegister, execute, Aer
from qiskit.visualization import plot_histogram
import numpy as np
import time
import sqlite3

# Connect to the database
conn = sqlite3.connect('qcash.db')
c = conn.cursor()

# Create the wallet table
c.execute('''CREATE TABLE IF NOT EXISTS wallets
             (address text, balance real)''')

# Define the constants
MAX_SHARES = 6000000
INITIAL_PRICE = 0.01
SHARE_INCREMENT = 0.01

# Define the quantum circuit
q = QuantumRegister(6, 'q')
c = ClassicalRegister(5, 'c')
qc = QuantumCircuit(q, c)

# Function to convert binary string to integer
def binstr_to_int(s):
    return int(s, 2)

# Function to convert integer to binary string
def int_to_binstr(n):
    return '{0:b}'.format(n).zfill(5)

# Function to get the current price of a share
def get_share_price(num_shares):
    return INITIAL_PRICE + SHARE_INCREMENT * num_shares

# Function to buy shares
def buy_shares(num_shares, wallet_address):
    # Get the current price of a share
    share_price = get_share_price(num_shares)
    
    # Check if the wallet has enough balance to buy the shares
    c.execute('SELECT balance FROM wallets WHERE address = ?', (wallet_address,))
    row = c.fetchone()
    if row is None:
        balance = 0.0
    else:
        balance = row[0]
    cost = share_price * num_shares
    if cost > balance:
        return 'Insufficient funds'
    
    # Update the wallet balance
    balance -= cost
    c.execute('UPDATE wallets SET balance = ? WHERE address = ?', (balance, wallet_address))
    conn.commit()
    
    # Add the shares to the user's portfolio
    c.execute('SELECT * FROM portfolios WHERE address = ?', (wallet_address,))
    row = c.fetchone()
    if row is None:
        c.execute('INSERT INTO portfolios VALUES (?, ?)', (wallet_address, num_shares))
    else:
        num_shares += row[1]
        if num_shares > MAX_SHARES:
            return 'Share limit exceeded'
        c.execute('UPDATE portfolios SET num_shares = ? WHERE address = ?', (num_shares, wallet_address))
    conn.commit()
    
    # Apply advanced quantum operations
    qc.h(q[5])  # Apply Hadamard gate to the last qubit
    qc.cx(q[0], q[5])  # Apply CNOT gate between the first and last qubit
    qc.barrier()
    qc.measure(q[0:5], c)  # Measure the first 5 qubits
    
    backend = Aer.get_backend('qasm_simulator')
    job = execute(qc, backend=backend, shots=1)
    job_monitor(job)
    result = job.result().get_counts()
    
    if '00000' in result:
        return 'Shares purchased'
    else:
        return 'Error'

# Function to sell shares
def sell_shares(num_shares, wallet_address):
    # Get the current price of a share
    share_price = get_share_price(num_shares)
    
    # Check if the user has enough shares to sell
    c.execute('SELECT num_shares FROM portfolios WHERE address  = ?', (wallet_address,))
    row = c.fetchone()
    if row is None:
        return 'No shares to sell'
    elif num_shares > row[0]:
        return 'Insufficient shares'

    # Apply the H gate to the last qubit
    qc.h(q[5])

    # Apply the RZ gate to the first qubit with rotation angle pi/4
    qc.rz(np.pi/4, q[0])

    # Measure the first 5 qubits
    for i in range(5):
        qc.measure(q[i], c[i])

    # Execute the circuit and get the results
    job = execute(qc, backend='qasm_simulator', shots=1)
    job_monitor(job)
    result = job.result().get_counts()

    # Determine the outcome and return the appropriate message
    if '00000' in result:
        return 'Shares sold'
    elif '11111' in result:
        return 'Quantum error occurred'
    else:
        return 'Error'

